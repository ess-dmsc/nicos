description = "Devices for the detectors"

pvprefix = "SQ:SANS-LLB:rack14:"
countprefix = "SQ:SANS-LLB" ":counter"

devices = dict(
    dthx=device(
        "nicos.devices.epics.pyepics.motor.HomingProtectedEpicsMotor",
        epicstimeout=3.0,
        description="Detector x translation",
        motorpv=pvprefix + "dthx",
        errormsgpv=pvprefix + "dthx-MsgTxt",
        precision=0.01,
    ),
    dthz=device(
        "nicos.devices.epics.pyepics.motor.HomingProtectedEpicsMotor",
        epicstimeout=3.0,
        description="Detector z translation",
        motorpv=pvprefix + "dthz",
        errormsgpv=pvprefix + "dthz-MsgTxt",
        precision=0.01,
    ),
    dtlx=device(
        "nicos.devices.epics.pyepics.motor.HomingProtectedEpicsMotor",
        epicstimeout=3.0,
        description="Low Q detector x translation",
        motorpv=pvprefix + "dtlx",
        errormsgpv=pvprefix + "dtlx-MsgTxt",
        precision=0.01,
    ),
    dtlz=device(
        "nicos.devices.epics.pyepics.motor.HomingProtectedEpicsMotor",
        epicstimeout=3.0,
        description="Low Q detector z translation",
        motorpv=pvprefix + "dtlz",
        errormsgpv=pvprefix + "dtlz-MsgTxt",
        precision=0.01,
    ),
    crashcontrol=device(
        "nicos_sinq.sans-llb.devices.detectorcontroller.DetectorController",
        description="Controller preventing detector crashing into the rail",
        x="dtlx",
        z="dtlz",
        xthreshold=20,
        zthreshold=350,
        visibility=(),
    ),
    bsx=device(
        "nicos.devices.epics.pyepics.motor.HomingProtectedEpicsMotor",
        epicstimeout=3.0,
        description="Beamstop x translation",
        motorpv=pvprefix + "bsx",
        errormsgpv=pvprefix + "bsx-MsgTxt",
        precision=0.01,
    ),
    bsy=device(
        "nicos.devices.epics.pyepics.motor.HomingProtectedEpicsMotor",
        epicstimeout=3.0,
        description="Beamstop y translation",
        motorpv=pvprefix + "bsy",
        errormsgpv=pvprefix + "bsy-MsgTxt",
        precision=0.01,
    ),
    timepreset=device(
        "nicos_sinq.devices.epics.detector.EpicsTimerActiveChannel",
        epicstimeout=3.0,
        description="Used to set and view time preset",
        unit="sec",
        readpv=countprefix + ".TP",
        presetpv=countprefix + ".TP",
    ),
    elapsedtime=device(
        "nicos_sinq.devices.epics.detector.EpicsTimerPassiveChannel",
        epicstimeout=3.0,
        description="Used to view elapsed time while counting",
        unit="sec",
        readpv=countprefix + ".T",
    ),
    monitorpreset=device(
        "nicos_sinq.devices.epics.detector.EpicsCounterActiveChannel",
        epicstimeout=3.0,
        description="Used to set and view monitor preset",
        type="monitor",
        readpv=countprefix + ".PR2",
        presetpv=countprefix + ".PR2",
    ),
    monitor1=device(
        "nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel",
        epicstimeout=3.0,
        description="First scalar counter channel",
        type="monitor",
        readpv=countprefix + ".S2",
    ),
    monitor2=device(
        "nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel",
        epicstimeout=3.0,
        description="Second scalar counter channel",
        type="monitor",
        readpv=countprefix + ".S3",
    ),
    c3=device(
        "nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel",
        epicstimeout=3.0,
        description="Third scalar counter channel",
        type="monitor",
        visibility=(),
        readpv=countprefix + ".S4",
    ),
    protoncount=device(
        "nicos_sinq.devices.epics.detector.EpicsCounterPassiveChannel",
        epicstimeout=3.0,
        description="Fourth scalar counter channel",
        type="monitor",
        readpv=countprefix + ".S5",
    ),
    low_q_raw=device(
        "nicos_sinq.devices.epics.area_detector.ADImageChannel",
        description="Raw image data for low Q SANS detector",
        pvprefix="SQ:SANS-LLB:counter:det1",
        readpv="SQ:SANS-LLB:counter:det1:Image",
        epicstimeout=30.0,
    ),
    low_q=device(
        "nicos_sinq.sans-llb.devices.imagechannel.LLBCalibratedImage",
        description="SANS Image calibrated and converted to 128x128",
        calibration_file="Calib8.txt",
        rawimage="low_q_raw",
    ),
    high_q_raw=device(
        "nicos_sinq.devices.epics.area_detector.ADImageChannel",
        description="Raw image data for high Q SANS detector",
        pvprefix="SQ:SANS-LLB:counter:det2",
        readpv="SQ:SANS-LLB:counter:det2:Image",
        epicstimeout=30.0,
    ),
    high_q=device(
        "nicos_sinq.sans-llb.devices.imagechannel.XSummedImageChannel",
        description="High Q SANS Image converted to 64*32",
        sumstep=4,
        rawimage="high_q_raw",
    ),
    sansllbdet=device(
        "nicos_sinq.devices.detector.SinqDetector",
        epicstimeout=3.0,
        description="SANS-LLB detector that counts neutrons and "
        "starts streaming events",
        startpv=countprefix + ".CNT",
        errormsgpv=countprefix + ":MsgTxt",
        monitorpreset="monitorpreset",
        timepreset="timepreset",
        timers=["elapsedtime"],
        monitors=["monitor1", "monitor2", "c3", "protoncount"],
        images=["low_q", "low_q_raw", "high_q", "high_q_raw"],
        others=[],
        liveinterval=20,
        saveintervals=[120],
    ),
)

startupcode = """
SetDetectors(sansllbdet)
"""
