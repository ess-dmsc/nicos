# ruff: noqa: F821
description = "The Anton-Paar MCR702e Rheometer"

pv_root = "SE-SEE:SE-RHEO-001:"

devices = dict(
    speed=device(
        "nicos.devices.epics.pva.EpicsReadable",
        description="The rotation speed.",
        readpv="{}RotSpeed-R".format(pv_root),
        monitor=True,
        pva=True,
        pollinterval=None,
    ),
    strain_amplitude=device(
        "nicos.devices.epics.pva.EpicsReadable",
        description="The strain amplitude.",
        readpv="{}Strain-R".format(pv_root),
        monitor=True,
        pva=True,
        pollinterval=None,
    ),
    shear_strain=device(
        "nicos.devices.epics.pva.EpicsReadable",
        description="The shear strain.",
        readpv="{}ShearStrain".format(pv_root),
        monitor=True,
        pva=True,
        pollinterval=None,
    ),
    shear_stress=device(
        "nicos.devices.epics.pva.EpicsReadable",
        description="The shear stress.",
        readpv="{}ShearStress".format(pv_root),
        monitor=True,
        pva=True,
        pollinterval=None,
    ),
    shear_rate=device(
        "nicos.devices.epics.pva.EpicsReadable",
        description="The shear rate.",
        readpv="{}ShearRate".format(pv_root),
        monitor=True,
        pva=True,
        pollinterval=None,
    ),
    torque=device(
        "nicos.devices.epics.pva.EpicsReadable",
        description="The torque.",
        readpv="{}Torque-R".format(pv_root),
        monitor=True,
        pva=True,
        pollinterval=None,
    ),
    phase_angle=device(
        "nicos.devices.epics.pva.EpicsReadable",
        description="The phase angle.",
        readpv="{}PhaseAng-R".format(pv_root),
        monitor=True,
        pva=True,
        pollinterval=None,
    ),
    strain_constant=device(
        "nicos.devices.epics.pva.EpicsReadable",
        description="The constant strain.",
        readpv="{}CSRfactor".format(pv_root),
        monitor=True,
        pva=True,
        pollinterval=None,
    ),
    stress_constant=device(
        "nicos.devices.epics.pva.EpicsReadable",
        description="The constant stress.",
        readpv="{}CSSfactor".format(pv_root),
        monitor=True,
        pva=True,
        pollinterval=None,
    ),
    temperature=device(
        "nicos.devices.epics.pva.EpicsReadable",
        description="The temperature.",
        readpv="{}Temp-R".format(pv_root),
        monitor=True,
        pva=True,
        pollinterval=None,
    ),
    viscocity=device(
        "nicos.devices.epics.pva.EpicsReadable",
        description="The calculated viscosity.",
        readpv="{}Viscosity".format(pv_root),
        monitor=True,
        pva=True,
        pollinterval=None,
    ),
    tot_modulus=device(
        "nicos.devices.epics.pva.EpicsReadable",
        description="The calculated tot modulus.",
        readpv="{}TotModulus".format(pv_root),
        monitor=True,
        pva=True,
        pollinterval=None,
    ),
    meas_number=device(
        "nicos.devices.epics.pva.EpicsReadable",
        description="The measurement number, restarts at 1 for each new measurement interval.",
        readpv="{}MeasNumb-R".format(pv_root),
        monitor=True,
        pva=True,
        pollinterval=None,
    ),
    meas_interval=device(
        "nicos.devices.epics.pva.EpicsReadable",
        description="The interval number.",
        readpv="{}MeasInterval-R".format(pv_root),
        monitor=True,
        pva=True,
        pollinterval=None,
    ),
    rheo_control=device(
        "nicos_ess.devices.epics.ap_rheometer.RheometerControl",
        description="The controller for the rheometer.",
        pv_root=pv_root,
        pva=True,
    ),
)
