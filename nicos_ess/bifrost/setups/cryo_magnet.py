description = "Setup for SE-AUX-205 PVs with NICOS mapping."

pv_root = "SE:SE-AUX-205:"

devices = dict(
    temp_a=device(
        "nicos_ess.devices.epics.pva.EpicsReadable",
        description="Lakeshore temperature channel A",
        readpv=f"{pv_root}TempA-r",
        abslimits=(0, 1505),
        userlimits=(0, 1505),
    ),
    temp_b=device(
        "nicos_ess.devices.epics.pva.EpicsReadable",
        description="Lakeshore temperature channel B",
        readpv=f"{pv_root}TempB-r",
        abslimits=(0, 1505),
        userlimits=(0, 1505),
    ),
    temp_c=device(
        "nicos_ess.devices.epics.pva.EpicsReadable",
        description="Lakeshore temperature channel C",
        readpv=f"{pv_root}TempC-r",
        abslimits=(0, 1505),
        userlimits=(0, 1505),
    ),
    temp_d=device(
        "nicos_ess.devices.epics.pva.EpicsReadable",
        description="Lakeshore temperature channel D",
        readpv=f"{pv_root}TempD-r",
        abslimits=(0, 1505),
        userlimits=(0, 1505),
    ),
    p_1=device(
        "nicos_ess.devices.epics.pva.EpicsReadable",
        description="Vacuum transducer 1",
        readpv=f"{pv_root}P1-r",
        abslimits=(0, 1100),
        userlimits=(0, 1100),
    ),
    p_2=device(
        "nicos_ess.devices.epics.pva.EpicsReadable",
        description="Vacuum transducer 2",
        readpv=f"{pv_root}P2-r",
        abslimits=(0, 1100),
        userlimits=(0, 1100),
    ),
    ln2=device(
        "nicos_ess.devices.epics.pva.EpicsReadable",
        description="Liquid-nitrogen level",
        readpv=f"{pv_root}LN2-r",
        abslimits=(0, 100),
        userlimits=(0, 100),
    ),
    flush=device(
        "nicos_ess.devices.epics.manual_switch.ManualSwitch",
        description="Start/stop the Flush cycle",
        readpv=f"{pv_root}Flush-s",
        writepv=f"{pv_root}Flush-s",
        states=["False", "True"],
        mapping={"False": 0, "True": 1},
    ),
    flush_running=device(
        "nicos_ess.devices.epics.pva.EpicsStringReadable",
        description="Is the Flushing running",
        readpv=f"{pv_root}Flush-Running-r",
    ),
    flush_state=device(
        "nicos_ess.devices.epics.pva.EpicsStringReadable",
        description="Current state of the Flush-cycle state machine",
        readpv=f"{pv_root}Flush-State-r",
    ),
    flush_p_target=device(
        "nicos_ess.devices.epics.pva.EpicsAnalogMoveable",
        description="Target pressure at end of Flush cycle",
        readpv=f"{pv_root}Flush-PTarget-s",
        writepv=f"{pv_root}Flush-PTarget-s",
        abslimits=(0, 1000),
        userlimits=(0, 1000),
    ),
    cvalve=device(
        "nicos_ess.devices.epics.pva.EpicsReadable",
        description="Cold-valve current position",
        readpv=f"{pv_root}CValve-r",
        abslimits=(0, 100),
        userlimits=(0, 100),
    ),
    cvalve_target=device(
        "nicos_ess.devices.epics.pva.EpicsAnalogMoveable",
        description="Cold-valve target position",
        readpv=f"{pv_root}CValve-Target-s",
        writepv=f"{pv_root}CValve-Target-s",
        abslimits=(0, 100),
        userlimits=(0, 100),
    ),
    p_reg=device(
        "nicos_ess.devices.epics.manual_switch.ManualSwitch",
        description="Pressure-regulator mode",
        readpv=f"{pv_root}PReg-s",
        writepv=f"{pv_root}PReg-s",
        states=["position", "pressure", "table"],
        mapping={"position": 0, "pressure": 1, "table": 2},
    ),
    ln2f=device(
        "nicos_ess.devices.epics.pva.EpicsStringReadable",
        description="LN2 filling in progress",
        readpv=f"{pv_root}LN2F-r",
    ),
    ln2f_fill=device(
        "nicos_ess.devices.epics.manual_switch.ManualSwitch",
        description="Start/stop LN2 fill",
        readpv=f"{pv_root}LLN2F-Fill-s",
        writepv=f"{pv_root}LN2F-Fill-s",
        states=["False", "True"],
        mapping={"False": 0, "True": 1},
    ),
    ln2f_auto=device(
        "nicos_ess.devices.epics.manual_switch.ManualSwitch",
        description="LN2 auto-fill on/off",
        readpv=f"{pv_root}LN2F-Auto-s",
        writepv=f"{pv_root}LN2F-Auto-s",
        states=["False", "True"],
        mapping={"False": 0, "True": 1},
    ),
    ln2f_state=device(
        "nicos_ess.devices.epics.pva.EpicsStringReadable",
        description="State of the LN2 filling state machine",
        readpv=f"{pv_root}LN2F-State-r",
    ),
)
