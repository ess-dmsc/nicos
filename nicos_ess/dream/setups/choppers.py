description = "The choppers for DREAM"

pv_root_band_chopper = "DREAM-ChpSy1:Chop-BC-201:"
pv_root_overlap_chopper = "DREAM-ChpSy1:Chop-OC-103:"
pv_root_pulse_shaping_chopper_1 = "DREAM-ChpSy1:Chop-PSC-101:"
pv_root_pulse_shaping_chopper_2 = "DREAM-ChpSy1:Chop-PSC-102:"
chic_root = "DREAM-ChpSy1:Chop-CHIC-001:"

devices = dict(
    band_chopper_status=device(
        "nicos_ess.devices.epics.pva.EpicsMappedReadable",
        description="The chopper status.",
        readpv="{}ChopState_R".format(pv_root_band_chopper),
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    band_chopper_control=device(
        "nicos_ess.devices.epics.pva.EpicsMappedMoveable",
        description="Used to start and stop the chopper.",
        readpv="{}C_Execute".format(pv_root_band_chopper),
        writepv="{}C_Execute".format(pv_root_band_chopper),
        requires={"level": "admin"},
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    band_chopper_speed=device(
        "nicos_ess.devices.epics.pva.EpicsAnalogMoveable",
        description="The current speed.",
        readpv="{}Spd_R".format(pv_root_band_chopper),
        writepv="{}Spd_S".format(pv_root_band_chopper),
        abslimits=(0.0, 0.0),
        precision=0.1,
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    band_chopper_delay=device(
        "nicos_ess.devices.epics.pva.EpicsAnalogMoveable",
        description="The current delay.",
        readpv="{}ChopDly-S".format(pv_root_band_chopper),
        writepv="{}ChopDly-S".format(pv_root_band_chopper),
        abslimits=(0.0, 0.0),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    band_chopper_delay_errors=device(
        "nicos_ess.devices.epics.chopper_delay_error.ChopperDelayError",
        description="The current delay.",
        readpv="{}DiffTSSamples".format(pv_root_band_chopper),
        unit="ns",
        visibility=(
            "metadata",
            "namespace",
        ),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    band_chopper_phased=device(
        "nicos_ess.devices.epics.pva.EpicsMappedReadable",
        description="The chopper is in phase.",
        readpv="{}InPhs_R".format(pv_root_band_chopper),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    band_chopper_park_angle=device(
        "nicos_ess.devices.epics.pva.EpicsAnalogMoveable",
        description="The chopper's park angle.",
        readpv="{}Pos_R".format(pv_root_band_chopper),
        writepv="{}Park_S".format(pv_root_band_chopper),
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    band_chopper_chic=device(
        "nicos_ess.devices.epics.pva.EpicsMappedReadable",
        description="The status of the CHIC connection.",
        readpv="{}ConnectedR".format(chic_root),
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    band_chopper_alarms=device(
        "nicos_ess.devices.epics.chopper.ChopperAlarms",
        description="The chopper alarms",
        pv_root=pv_root_band_chopper,
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    band_chopper=device(
        "nicos_ess.devices.epics.chopper.EssChopperController",
        description="The chopper controller",
        pollinterval=0.5,
        maxage=None,
        state="band_chopper_status",
        command="band_chopper_control",
        speed="band_chopper_speed",
        chic_conn="band_chopper_chic",
        alarms="band_chopper_alarms",
        slit_edges=[[0.0, 73.55, 180.0, 253.55]],
    ),
    overlap_chopper_status=device(
        "nicos_ess.devices.epics.pva.EpicsMappedReadable",
        description="The chopper status.",
        readpv="{}ChopState_R".format(pv_root_overlap_chopper),
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    overlap_chopper_control=device(
        "nicos_ess.devices.epics.pva.EpicsMappedMoveable",
        description="Used to start and stop the chopper.",
        readpv="{}C_Execute".format(pv_root_overlap_chopper),
        writepv="{}C_Execute".format(pv_root_overlap_chopper),
        requires={"level": "admin"},
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    overlap_chopper_speed=device(
        "nicos_ess.devices.epics.pva.EpicsAnalogMoveable",
        description="The current speed.",
        readpv="{}Spd_R".format(pv_root_overlap_chopper),
        writepv="{}Spd_S".format(pv_root_overlap_chopper),
        abslimits=(0.0, 0.0),
        precision=0.1,
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    overlap_chopper_delay=device(
        "nicos_ess.devices.epics.pva.EpicsAnalogMoveable",
        description="The current delay.",
        readpv="{}ChopDly-S".format(pv_root_overlap_chopper),
        writepv="{}ChopDly-S".format(pv_root_overlap_chopper),
        abslimits=(0.0, 0.0),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    overlap_chopper_delay_errors=device(
        "nicos_ess.devices.epics.chopper_delay_error.ChopperDelayError",
        description="The current delay.",
        readpv="{}DiffTSSamples".format(pv_root_overlap_chopper),
        unit="ns",
        visibility=(
            "metadata",
            "namespace",
        ),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    overlap_chopper_phased=device(
        "nicos_ess.devices.epics.pva.EpicsMappedReadable",
        description="The chopper is in phase.",
        readpv="{}InPhs_R".format(pv_root_overlap_chopper),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    overlap_chopper_park_angle=device(
        "nicos_ess.devices.epics.pva.EpicsAnalogMoveable",
        description="The chopper's park angle.",
        readpv="{}Pos_R".format(pv_root_overlap_chopper),
        writepv="{}Park_S".format(pv_root_overlap_chopper),
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    overlap_chopper_chic=device(
        "nicos_ess.devices.epics.pva.EpicsMappedReadable",
        description="The status of the CHIC connection.",
        readpv="{}ConnectedR".format(chic_root),
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    overlap_chopper_alarms=device(
        "nicos_ess.devices.epics.chopper.ChopperAlarms",
        description="The chopper alarms",
        pv_root=pv_root_overlap_chopper,
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    overlap_chopper=device(
        "nicos_ess.devices.epics.chopper.EssChopperController",
        description="The chopper controller",
        pollinterval=0.5,
        maxage=None,
        state="overlap_chopper_status",
        command="overlap_chopper_control",
        speed="overlap_chopper_speed",
        chic_conn="overlap_chopper_chic",
        alarms="overlap_chopper_alarms",
        slit_edges=[[0.0, 27.6]],
    ),
    pulse_shaping_chopper_1_status=device(
        "nicos_ess.devices.epics.pva.EpicsMappedReadable",
        description="The chopper status.",
        readpv="{}ChopState_R".format(pv_root_pulse_shaping_chopper_1),
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_1_control=device(
        "nicos_ess.devices.epics.pva.EpicsMappedMoveable",
        description="Used to start and stop the chopper.",
        readpv="{}C_Execute".format(pv_root_pulse_shaping_chopper_1),
        writepv="{}C_Execute".format(pv_root_pulse_shaping_chopper_1),
        requires={"level": "admin"},
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_1_speed=device(
        "nicos_ess.devices.epics.pva.EpicsAnalogMoveable",
        description="The current speed.",
        readpv="{}Spd_R".format(pv_root_pulse_shaping_chopper_1),
        writepv="{}Spd_S".format(pv_root_pulse_shaping_chopper_1),
        abslimits=(0.0, 0.0),
        precision=0.1,
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_1_delay=device(
        "nicos_ess.devices.epics.pva.EpicsAnalogMoveable",
        description="The current delay.",
        readpv="{}ChopDly-S".format(pv_root_pulse_shaping_chopper_1),
        writepv="{}ChopDly-S".format(pv_root_pulse_shaping_chopper_1),
        abslimits=(0.0, 0.0),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_1_delay_errors=device(
        "nicos_ess.devices.epics.chopper_delay_error.ChopperDelayError",
        description="The current delay.",
        readpv="{}DiffTSSamples".format(pv_root_pulse_shaping_chopper_1),
        unit="ns",
        visibility=(
            "metadata",
            "namespace",
        ),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_1_phased=device(
        "nicos_ess.devices.epics.pva.EpicsMappedReadable",
        description="The chopper is in phase.",
        readpv="{}InPhs_R".format(pv_root_pulse_shaping_chopper_1),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_1_park_angle=device(
        "nicos_ess.devices.epics.pva.EpicsAnalogMoveable",
        description="The chopper's park angle.",
        readpv="{}Pos_R".format(pv_root_pulse_shaping_chopper_1),
        writepv="{}Park_S".format(pv_root_pulse_shaping_chopper_1),
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_1_chic=device(
        "nicos_ess.devices.epics.pva.EpicsMappedReadable",
        description="The status of the CHIC connection.",
        readpv="{}ConnectedR".format(chic_root),
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_1_alarms=device(
        "nicos_ess.devices.epics.chopper.ChopperAlarms",
        description="The chopper alarms",
        pv_root=pv_root_pulse_shaping_chopper_1,
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_1=device(
        "nicos_ess.devices.epics.chopper.EssChopperController",
        description="The chopper controller",
        pollinterval=0.5,
        maxage=None,
        state="pulse_shaping_chopper_1_status",
        command="pulse_shaping_chopper_1_control",
        speed="pulse_shaping_chopper_1_speed",
        chic_conn="pulse_shaping_chopper_1_chic",
        alarms="pulse_shaping_chopper_1_alarms",
        slit_edges=[
            [
                0.0,
                2.46,
                71.72,
                74.74,
                85.995,
                89.265,
                114.795,
                118.065,
                171.52,
                176.54,
                272.865,
                276.795,
                287.265,
                291.195,
                302.4,
                304.86,
            ]
        ],
    ),
    pulse_shaping_chopper_2_status=device(
        "nicos_ess.devices.epics.pva.EpicsMappedReadable",
        description="The chopper status.",
        readpv="{}ChopState_R".format(pv_root_pulse_shaping_chopper_2),
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_2_control=device(
        "nicos_ess.devices.epics.pva.EpicsMappedMoveable",
        description="Used to start and stop the chopper.",
        readpv="{}C_Execute".format(pv_root_pulse_shaping_chopper_2),
        writepv="{}C_Execute".format(pv_root_pulse_shaping_chopper_2),
        requires={"level": "admin"},
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_2_speed=device(
        "nicos_ess.devices.epics.pva.EpicsAnalogMoveable",
        description="The current speed.",
        readpv="{}Spd_R".format(pv_root_pulse_shaping_chopper_2),
        writepv="{}Spd_S".format(pv_root_pulse_shaping_chopper_2),
        abslimits=(0.0, 0.0),
        precision=0.1,
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_2_delay=device(
        "nicos_ess.devices.epics.pva.EpicsAnalogMoveable",
        description="The current delay.",
        readpv="{}ChopDly-S".format(pv_root_pulse_shaping_chopper_2),
        writepv="{}ChopDly-S".format(pv_root_pulse_shaping_chopper_2),
        abslimits=(0.0, 0.0),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_2_delay_errors=device(
        "nicos_ess.devices.epics.chopper_delay_error.ChopperDelayError",
        description="The current delay.",
        readpv="{}DiffTSSamples".format(pv_root_pulse_shaping_chopper_2),
        unit="ns",
        visibility=(
            "metadata",
            "namespace",
        ),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_2_phased=device(
        "nicos_ess.devices.epics.pva.EpicsMappedReadable",
        description="The chopper is in phase.",
        readpv="{}InPhs_R".format(pv_root_pulse_shaping_chopper_2),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_2_park_angle=device(
        "nicos_ess.devices.epics.pva.EpicsAnalogMoveable",
        description="The chopper's park angle.",
        readpv="{}Pos_R".format(pv_root_pulse_shaping_chopper_2),
        writepv="{}Park_S".format(pv_root_pulse_shaping_chopper_2),
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_2_chic=device(
        "nicos_ess.devices.epics.pva.EpicsMappedReadable",
        description="The status of the CHIC connection.",
        readpv="{}ConnectedR".format(chic_root),
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_2_alarms=device(
        "nicos_ess.devices.epics.chopper.ChopperAlarms",
        description="The chopper alarms",
        pv_root=pv_root_pulse_shaping_chopper_2,
        visibility=(),
        pva=True,
        monitor=True,
        pollinterval=None,
        maxage=None,
    ),
    pulse_shaping_chopper_2=device(
        "nicos_ess.devices.epics.chopper.EssChopperController",
        description="The chopper controller",
        pollinterval=0.5,
        maxage=None,
        state="pulse_shaping_chopper_2_status",
        command="pulse_shaping_chopper_2_control",
        speed="pulse_shaping_chopper_2_speed",
        chic_conn="pulse_shaping_chopper_2_chic",
        alarms="pulse_shaping_chopper_2_alarms",
        slit_edges=[
            [
                0.0,
                2.46,
                28.23,
                31.83,
                57.03,
                60.63,
                143.615,
                146.845,
                157.995,
                161.265,
                215.345,
                219.115,
                258.46,
                262.4,
                316.72,
                319.34,
            ]
        ],
    ),
)
